
/***************************************************************************** 
 * File generated from ThingML (Do not edit this file) 
 *****************************************************************************/


/*****************************************************************************
 * Definition of simple types and enumerations
 *****************************************************************************/

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

// Definition of Enumeration  DigitalState
#define DIGITALSTATE_LOW 0
#define DIGITALSTATE_HIGH 1

/*****************************************************************************
 * Headers for type : VirtualPort
 *****************************************************************************/

// Definition of the instance stuct:
struct VirtualPort_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int VirtualPort_bChart_State;
// Variables for the properties of the instance
};

// Declaration of prototypes outgoing messages:
void VirtualPort_bChart_OnEntry(int state, struct VirtualPort_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_VirtualPort_send_TronPort_tronReady_listener(void (*_listener)(struct VirtualPort_Instance*));
void register_VirtualPort_send_TronPort_tronGo_listener(void (*_listener)(struct VirtualPort_Instance*));
void register_VirtualPort_send_TronPort_addHead_listener(void (*_listener)(struct VirtualPort_Instance*, uint8_t, uint8_t, uint8_t));
void register_VirtualPort_send_TronPort_loose_listener(void (*_listener)(struct VirtualPort_Instance*, uint8_t));

// Definition of the states:
#define VIRTUALPORT_BCHART_STATE 0
#define VIRTUALPORT_BCHART_INIT_STATE 1

/*****************************************************************************
 * Implementation for type : VirtualPort
 *****************************************************************************/

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void VirtualPort_bChart_OnExit(int state, struct VirtualPort_Instance *_instance);
void VirtualPort_send_TronPort_tronReady(struct VirtualPort_Instance *_instance);
void VirtualPort_send_TronPort_tronGo(struct VirtualPort_Instance *_instance);
void VirtualPort_send_TronPort_addHead(struct VirtualPort_Instance *_instance, uint8_t x, uint8_t y, uint8_t id);
void VirtualPort_send_TronPort_loose(struct VirtualPort_Instance *_instance, uint8_t id);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void VirtualPort_bChart_OnEntry(int state, struct VirtualPort_Instance *_instance) {
switch(state) {
case VIRTUALPORT_BCHART_STATE:
_instance->VirtualPort_bChart_State = VIRTUALPORT_BCHART_INIT_STATE;
VirtualPort_bChart_OnEntry(_instance->VirtualPort_bChart_State, _instance);
break;
case VIRTUALPORT_BCHART_INIT_STATE:
break;
default: break;
}
}

// On Exit Actions:
void VirtualPort_bChart_OnExit(int state, struct VirtualPort_Instance *_instance) {
switch(state) {
case VIRTUALPORT_BCHART_STATE:
VirtualPort_bChart_OnExit(_instance->VirtualPort_bChart_State, _instance);
break;
case VIRTUALPORT_BCHART_INIT_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:

// Observers for outgoing messages:
void (*VirtualPort_send_TronPort_tronReady_listener)(struct VirtualPort_Instance*)= 0x0;
void register_VirtualPort_send_TronPort_tronReady_listener(void (*_listener)(struct VirtualPort_Instance*)){
VirtualPort_send_TronPort_tronReady_listener = _listener;
}
void VirtualPort_send_TronPort_tronReady(struct VirtualPort_Instance *_instance){
if (VirtualPort_send_TronPort_tronReady_listener != 0x0) VirtualPort_send_TronPort_tronReady_listener(_instance);
}
void (*VirtualPort_send_TronPort_tronGo_listener)(struct VirtualPort_Instance*)= 0x0;
void register_VirtualPort_send_TronPort_tronGo_listener(void (*_listener)(struct VirtualPort_Instance*)){
VirtualPort_send_TronPort_tronGo_listener = _listener;
}
void VirtualPort_send_TronPort_tronGo(struct VirtualPort_Instance *_instance){
if (VirtualPort_send_TronPort_tronGo_listener != 0x0) VirtualPort_send_TronPort_tronGo_listener(_instance);
}
void (*VirtualPort_send_TronPort_addHead_listener)(struct VirtualPort_Instance*, uint8_t, uint8_t, uint8_t)= 0x0;
void register_VirtualPort_send_TronPort_addHead_listener(void (*_listener)(struct VirtualPort_Instance*, uint8_t, uint8_t, uint8_t)){
VirtualPort_send_TronPort_addHead_listener = _listener;
}
void VirtualPort_send_TronPort_addHead(struct VirtualPort_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){
if (VirtualPort_send_TronPort_addHead_listener != 0x0) VirtualPort_send_TronPort_addHead_listener(_instance, x, y, id);
}
void (*VirtualPort_send_TronPort_loose_listener)(struct VirtualPort_Instance*, uint8_t)= 0x0;
void register_VirtualPort_send_TronPort_loose_listener(void (*_listener)(struct VirtualPort_Instance*, uint8_t)){
VirtualPort_send_TronPort_loose_listener = _listener;
}
void VirtualPort_send_TronPort_loose(struct VirtualPort_Instance *_instance, uint8_t id){
if (VirtualPort_send_TronPort_loose_listener != 0x0) VirtualPort_send_TronPort_loose_listener(_instance, id);
}

/*****************************************************************************
 * Headers for type : Tron
 *****************************************************************************/


// BEGIN: Code from the c_header annotation Tron

#define _SNAKE_TAB_SIZE 546 // 2184 / 4
#include <SoftwareSerial.h>
#include "/home/sintef/Documents/ArduinoSerialForward/Ring/ArduinoSerialForward.h" 
// END: Code from the c_header annotation Tron

// Definition of the instance stuct:
struct Tron_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int Tron_TronStateChart_State;
// Variables for the properties of the instance
uint8_t Tron_myID__var;
uint8_t Tron_nbID__var;
uint8_t Tron_nbReady__var;
uint8_t Tron_headX__var;
uint8_t Tron_headY__var;
uint8_t Tron_tailX__var;
uint8_t Tron_tailY__var;
uint16_t Tron_headIndex__var;
uint8_t Tron_headIndexQuarter__var;
uint8_t Tron_lost__var;
uint8_t Tron_won__var;
uint8_t Tron_timer__var;
int16_t Tron_speed__var;
uint8_t Tron_direction__var;
uint8_t Tron_dirBuff__var;
uint16_t Tron_color__var[3];
uint8_t Tron_hasLost__var[3];
};

// Declaration of prototypes outgoing messages:
void Tron_TronStateChart_OnEntry(int state, struct Tron_Instance *_instance);
void Tron_handle_lcd_LCDready(struct Tron_Instance *_instance);
void Tron_handle_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id);
void Tron_handle_TronPort_loose(struct Tron_Instance *_instance, uint8_t id);
void Tron_handle_TronPort_tronGo(struct Tron_Instance *_instance);
void Tron_handle_TronPort_tronReady(struct Tron_Instance *_instance);
void Tron_handle_button_button_state_change(struct Tron_Instance *_instance, uint8_t bstate);
void Tron_handle_arduino_timeout(struct Tron_Instance *_instance, uint8_t id);
// Declaration of callbacks for incomming messages:
void register_Tron_send_TronPort_addHead_listener(void (*_listener)(struct Tron_Instance*, uint8_t, uint8_t, uint8_t));
void register_Tron_send_TronPort_loose_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_TronPort_tronReady_listener(void (*_listener)(struct Tron_Instance*));
void register_Tron_send_TronPort_tronGo_listener(void (*_listener)(struct Tron_Instance*));
void register_Tron_send_button_button_state_listener(void (*_listener)(struct Tron_Instance*));
void register_Tron_send_lcd_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t));
void register_Tron_send_lcd_print_dec_listener(void (*_listener)(struct Tron_Instance*, double));
void register_Tron_send_lcd_print_str_listener(void (*_listener)(struct Tron_Instance*, char *));
void register_Tron_send_lcd_clear_listener(void (*_listener)(struct Tron_Instance*));
void register_Tron_send_lcd_set_cursor_listener(void (*_listener)(struct Tron_Instance*, uint8_t, uint8_t));
void register_Tron_send_lcd_set_bgcolor_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_lcd_fillRect_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t));
void register_Tron_send_lcd_drawRect_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t));
void register_Tron_send_lcd_drawLine_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t));
void register_Tron_send_arduino_timer_start_listener(void (*_listener)(struct Tron_Instance*, uint8_t, int16_t));
void register_Tron_send_arduino_timer_cancel_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_serial_print_str_listener(void (*_listener)(struct Tron_Instance*, char *));
void register_Tron_send_arduino_serial_print_dec_listener(void (*_listener)(struct Tron_Instance*, double));
void register_Tron_send_arduino_serial_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t));
void register_Tron_send_arduino_usb_print_str_listener(void (*_listener)(struct Tron_Instance*, char *));
void register_Tron_send_arduino_usb_print_dec_listener(void (*_listener)(struct Tron_Instance*, double));
void register_Tron_send_arduino_usb_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t));
void register_Tron_send_arduino_setDigitalHigh_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_setDigitalLow_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_setOutput_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_setInput_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_readDigital_listener(void (*_listener)(struct Tron_Instance*, uint8_t));
void register_Tron_send_arduino_readAnalog_listener(void (*_listener)(struct Tron_Instance*, uint8_t));

// Definition of the states:
#define TRON_TRONSTATECHART_STATE 0
#define TRON_TRONSTATECHART_INIT_STATE 1
#define TRON_TRONSTATECHART_WAITING_STATE 2
#define TRON_TRONSTATECHART_RENDEZVOUS_STATE 3
#define TRON_TRONSTATECHART_GAME_STATE 4
#define TRON_TRONSTATECHART_DEFEAT_STATE 5
#define TRON_TRONSTATECHART_VICTORY_STATE 6

/*****************************************************************************
 * Implementation for type : Tron
 *****************************************************************************/


// BEGIN: Code from the c_global annotation Tron
volatile uint8_t tab[_SNAKE_TAB_SIZE];
// END: Code from the c_global annotation Tron

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void Tron_TronStateChart_OnExit(int state, struct Tron_Instance *_instance);
void Tron_send_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id);
void Tron_send_TronPort_loose(struct Tron_Instance *_instance, uint8_t id);
void Tron_send_TronPort_tronReady(struct Tron_Instance *_instance);
void Tron_send_TronPort_tronGo(struct Tron_Instance *_instance);
void Tron_send_button_button_state(struct Tron_Instance *_instance);
void Tron_send_lcd_print_num(struct Tron_Instance *_instance, int16_t num);
void Tron_send_lcd_print_dec(struct Tron_Instance *_instance, double num);
void Tron_send_lcd_print_str(struct Tron_Instance *_instance, char * msg);
void Tron_send_lcd_clear(struct Tron_Instance *_instance);
void Tron_send_lcd_set_cursor(struct Tron_Instance *_instance, uint8_t c, uint8_t l);
void Tron_send_lcd_set_bgcolor(struct Tron_Instance *_instance, uint8_t color);
void Tron_send_lcd_fillRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col);
void Tron_send_lcd_drawRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col);
void Tron_send_lcd_drawLine(struct Tron_Instance *_instance, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t col);
void Tron_send_arduino_timer_start(struct Tron_Instance *_instance, uint8_t id, int16_t time);
void Tron_send_arduino_timer_cancel(struct Tron_Instance *_instance, uint8_t id);
void Tron_send_arduino_serial_print_str(struct Tron_Instance *_instance, char * msg);
void Tron_send_arduino_serial_print_dec(struct Tron_Instance *_instance, double num);
void Tron_send_arduino_serial_print_num(struct Tron_Instance *_instance, int16_t num);
void Tron_send_arduino_usb_print_str(struct Tron_Instance *_instance, char * msg);
void Tron_send_arduino_usb_print_dec(struct Tron_Instance *_instance, double num);
void Tron_send_arduino_usb_print_num(struct Tron_Instance *_instance, int16_t num);
void Tron_send_arduino_setDigitalHigh(struct Tron_Instance *_instance, uint8_t pin);
void Tron_send_arduino_setDigitalLow(struct Tron_Instance *_instance, uint8_t pin);
void Tron_send_arduino_setOutput(struct Tron_Instance *_instance, uint8_t pin);
void Tron_send_arduino_setInput(struct Tron_Instance *_instance, uint8_t pin);
void Tron_send_arduino_readDigital(struct Tron_Instance *_instance, uint8_t pin);
void Tron_send_arduino_readAnalog(struct Tron_Instance *_instance, uint8_t pin);
void f_Tron_displayTab(struct Tron_Instance *_instance);
uint8_t f_Tron_hasWon(struct Tron_Instance *_instance);
void f_Tron_addHeadDir(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t dir);
void f_Tron_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y);
uint8_t f_Tron_outOfBound(struct Tron_Instance *_instance, uint8_t x, uint8_t y);
uint8_t f_Tron_isInSnake(struct Tron_Instance *_instance, uint8_t x, uint8_t y);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:
// Definition of function displayTab
void f_Tron_displayTab(struct Tron_Instance *_instance) {
{
SWS_trace("[displayTab] Start\n");
		for(uint16_t i = 0; i < _instance->Tron_headIndex__var; i++) {
			SWS_trace("[");
			SWS_trace(i);
			SWS_trace("] ");
			SWS_trace(tab[i]);
			SWS_trace("\n ");
		}
}
}

// Definition of function hasWon
uint8_t f_Tron_hasWon(struct Tron_Instance *_instance) {
{

		bool won = true;
		for(uint8_t i = 0; i < _instance->Tron_nbID__var; i++) {
			if(i != _instance->Tron_myID__var) {won &= _instance->Tron_hasLost__var[i];}
		}
return won;
}
}

// Definition of function addHeadDir
void f_Tron_addHeadDir(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t dir) {
{
Tron_send_TronPort_addHead(_instance, x, y, _instance->Tron_myID__var);
Tron_send_lcd_drawRect(_instance, 2+3*x, 2+3*y, 2, 2, _instance->Tron_color__var[_instance->Tron_myID__var]);
uint8_t move = dir;
		uint8_t hI = _instance->Tron_headIndex__var;
		uint8_t hIQ = _instance->Tron_headIndexQuarter__var;
		
		if (hIQ == 0) {
			tab[hI] = B00000000;
		}
		
		
		tab[hI] |= (move << (2 * hIQ));
		
		hIQ = (hIQ + 1) % 4;
		if (hIQ == 0) {
			hI++;
		}
_instance->Tron_headX__var = x;
_instance->Tron_headY__var = y;
_instance->Tron_headIndex__var = hI;
_instance->Tron_headIndexQuarter__var = hIQ;
}
}

// Definition of function addHead
void f_Tron_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y) {
{
Tron_send_TronPort_addHead(_instance, x, y, _instance->Tron_myID__var);
SWS_trace("[addHead] x: ");
SWS_trace(x);
SWS_trace(" | y: ");
SWS_trace(y);
SWS_trace("\n");
Tron_send_lcd_drawRect(_instance, 2+3*x, 2+3*y, 2, 2, _instance->Tron_color__var[_instance->Tron_myID__var]);
uint8_t move = B00000000;
		
		if (_instance->Tron_headIndexQuarter__var == 0) {
			tab[_instance->Tron_headIndex__var] = B00000000;
		}
		
		if (x == _instance->Tron_headX__var) {
			if (y > _instance->Tron_headY__var) {
				move |= B00000010;
			}
		} else {
			move |= B00000001;
			if (x < _instance->Tron_headX__var) {
				move |= B00000010;
			}
		}
		
		tab[_instance->Tron_headIndex__var] |= (move << (2 * _instance->Tron_headIndexQuarter__var));
		
		//SWS_trace("tab <- ");
		//SWS_trace(tab[_instance->Tron_headIndex__var]);
		//SWS_trace("\n");
		
		_instance->Tron_headIndexQuarter__var = (_instance->Tron_headIndexQuarter__var + 1) % 4;
		if (_instance->Tron_headIndexQuarter__var == 0) {
			_instance->Tron_headIndex__var++;
		}
_instance->Tron_headX__var = x;
_instance->Tron_headY__var = y;
}
}

// Definition of function outOfBound
uint8_t f_Tron_outOfBound(struct Tron_Instance *_instance, uint8_t x, uint8_t y) {
{
return ((x > 41) || (y > 51));
}
}

// Definition of function isInSnake
uint8_t f_Tron_isInSnake(struct Tron_Instance *_instance, uint8_t x, uint8_t y) {
{
bool found = false;
		uint8_t curx = _instance->Tron_tailX__var;
		uint8_t cury = _instance->Tron_tailY__var;
		uint8_t targetx = x;
		uint8_t targety = y;
		uint16_t headIndex = _instance->Tron_headIndex__var;
		uint8_t  headIndexQuarter = _instance->Tron_headIndexQuarter__var;
		uint8_t curtab = 0;
		
		for(uint16_t i = 0; i < headIndex; i++) {
			for(uint8_t q = 0; q < 4; q++) {
				curtab = tab[i];
				
				
				delayMicroseconds(1);
				//SWS_trace("=> curx: ");
				//SWS_trace(curx);
				//SWS_trace(" | cury: ");
				//SWS_trace(cury);
				//SWS_trace("\n");
				SWS_trace_BIN(curtab);
				SWS_trace("\n");
				
				if ((targetx == curx) && (targety == cury)) {
					return true;
				}
				switch((curtab >> (2 * q)) & B00000011) {
					case B00000000:
						cury--;
					break;
					case B00000001:
						curx++;
					break;
					case B00000010:
						cury++;
					break;
					case B00000011:
						curx--;
					break;
				}
				
				
			}
		}
		
		for(uint8_t q = 0; q < headIndexQuarter; q++) {
				
				
				delayMicroseconds(1);
				//SWS_trace("=> curx: ");
				//SWS_trace(curx);
				//SWS_trace(" | cury: ");
				//SWS_trace(cury);
				//SWS_trace("\n");
				
				if ((targetx == curx) && (targety == cury)) {
					return true;
				}
				curtab = tab[headIndex];
				
				switch((curtab >> (2 * q)) & B00000011) {
					case B00000000:
						cury--;
					break;
					case B00000001:
						curx++;
					break;
					case B00000010:
						cury++;
					break;
					case B00000011:
						curx--;
					break;
				}
				
				
			}
return 0;
}
}


// On Entry Actions:
void Tron_TronStateChart_OnEntry(int state, struct Tron_Instance *_instance) {
switch(state) {
case TRON_TRONSTATECHART_STATE:
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_INIT_STATE;
Tron_TronStateChart_OnEntry(_instance->Tron_TronStateChart_State, _instance);
break;
case TRON_TRONSTATECHART_INIT_STATE:
break;
case TRON_TRONSTATECHART_WAITING_STATE:
{
_instance->Tron_color__var[0] = 0xF800;
_instance->Tron_color__var[1] = 0x001F;
_instance->Tron_color__var[2] = 0x3FE0;
SWS_trace("[Tron] Waiting\n");
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_set_cursor(_instance, 16, 58);
Tron_send_lcd_print_str(_instance, "Welcome to Tron!");
Tron_send_lcd_set_cursor(_instance, 12, 68);
Tron_send_lcd_print_str(_instance, "Press the joystick");
Tron_send_lcd_set_cursor(_instance, 35, 78);
Tron_send_lcd_print_str(_instance, "to start.");
Tron_send_lcd_set_cursor(_instance, 35, 88);
Tron_send_lcd_print_str(_instance, "You are ");
Tron_send_lcd_fillRect(_instance, 80, 88, 8, 8, _instance->Tron_color__var[_instance->Tron_myID__var]);
_instance->Tron_hasLost__var[0] = 0;
_instance->Tron_hasLost__var[1] = 0;
_instance->Tron_hasLost__var[2] = 0;
}
break;
case TRON_TRONSTATECHART_RENDEZVOUS_STATE:
{
SWS_trace("[Tron] Rendez vous\n");
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_set_cursor(_instance, 12, 78);
Tron_send_lcd_print_str(_instance, "Waiting for others");
_instance->Tron_nbReady__var = _instance->Tron_nbReady__var + 1;
Tron_send_TronPort_tronReady(_instance);
}
break;
case TRON_TRONSTATECHART_GAME_STATE:
{
SWS_trace("[Tron] Game\n");
_instance->Tron_nbReady__var = 0;
Tron_send_arduino_timer_start(_instance, _instance->Tron_timer__var, _instance->Tron_speed__var);
}
break;
case TRON_TRONSTATECHART_DEFEAT_STATE:
{
SWS_trace("[Tron] Defeat\n");
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_set_cursor(_instance, 45, 78);
Tron_send_lcd_print_str(_instance, "Defeat!");
}
break;
case TRON_TRONSTATECHART_VICTORY_STATE:
{
SWS_trace("[Tron] Victor\ny");
f_Tron_displayTab(_instance);
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_set_cursor(_instance, 44, 78);
Tron_send_lcd_print_str(_instance, "Victory!");
}
break;
default: break;
}
}

// On Exit Actions:
void Tron_TronStateChart_OnExit(int state, struct Tron_Instance *_instance) {
switch(state) {
case TRON_TRONSTATECHART_STATE:
Tron_TronStateChart_OnExit(_instance->Tron_TronStateChart_State, _instance);
break;
case TRON_TRONSTATECHART_INIT_STATE:
break;
case TRON_TRONSTATECHART_WAITING_STATE:
break;
case TRON_TRONSTATECHART_RENDEZVOUS_STATE:
{
_instance->Tron_nbReady__var = 0;
SWS_trace("[Tron] go to Game\n");
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_drawRect(_instance, 2+3*_instance->Tron_headX__var, 2+3*_instance->Tron_headY__var, 2, 2, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_TronPort_addHead(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var, _instance->Tron_myID__var);
}
break;
case TRON_TRONSTATECHART_GAME_STATE:
break;
case TRON_TRONSTATECHART_DEFEAT_STATE:
break;
case TRON_TRONSTATECHART_VICTORY_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void Tron_handle_lcd_LCDready(struct Tron_Instance *_instance) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_INIT_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_INIT_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_WAITING_STATE;
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_WAITING_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_GAME_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
{
SWS_trace("[Tron] received addHead (x:");
SWS_trace(x);
SWS_trace(", y:");
SWS_trace(y);
SWS_trace(")\n");
Tron_send_lcd_drawRect(_instance, 2+3*x, 2+3*y, 2, 2, _instance->Tron_color__var[id]);
if(f_Tron_isInSnake(_instance, x, y)) {
Tron_send_TronPort_loose(_instance, id);
_instance->Tron_hasLost__var[id] = 1;
_instance->Tron_won__var = f_Tron_hasWon(_instance);
}
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
else if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_DEFEAT_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
{
if(f_Tron_isInSnake(_instance, x, y)) {
Tron_send_TronPort_loose(_instance, id);
}
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_TronPort_loose(struct Tron_Instance *_instance, uint8_t id) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_GAME_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && (id == _instance->Tron_myID__var)) {
{
_instance->Tron_lost__var = 1;
}
Tron_TronStateChart_State_event_consumed = 1;
}
else if (Tron_TronStateChart_State_event_consumed == 0 &&  !(id == _instance->Tron_myID__var)) {
{
_instance->Tron_hasLost__var[id] = 1;
_instance->Tron_won__var = f_Tron_hasWon(_instance);
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_TronPort_tronGo(struct Tron_Instance *_instance) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_RENDEZVOUS_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_RENDEZVOUS_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_GAME_STATE;
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_GAME_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_TronPort_tronReady(struct Tron_Instance *_instance) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_WAITING_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
{
SWS_trace("[Tron] tronReady received\n");
_instance->Tron_nbReady__var = _instance->Tron_nbReady__var + 1;
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
else if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_RENDEZVOUS_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && (_instance->Tron_nbReady__var > _instance->Tron_nbID__var - 2)) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_RENDEZVOUS_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_GAME_STATE;
{
Tron_send_TronPort_tronGo(_instance);
}
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_GAME_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_button_button_state_change(struct Tron_Instance *_instance, uint8_t bstate) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_WAITING_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && (_instance->Tron_nbReady__var < _instance->Tron_nbID__var - 1)) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_WAITING_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_RENDEZVOUS_STATE;
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_RENDEZVOUS_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
else if (Tron_TronStateChart_State_event_consumed == 0 && 1) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_WAITING_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_GAME_STATE;
{
Tron_send_TronPort_tronGo(_instance);
_instance->Tron_nbReady__var = 0;
SWS_trace("[Tron] go to Game\n");
Tron_send_lcd_clear(_instance);
Tron_send_lcd_drawRect(_instance, 1, 1, 127, 157, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_lcd_drawRect(_instance, 2+3*_instance->Tron_headX__var, 2+3*_instance->Tron_headY__var, 2, 2, _instance->Tron_color__var[_instance->Tron_myID__var]);
Tron_send_TronPort_addHead(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var, _instance->Tron_myID__var);
}
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_GAME_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
}
else if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_GAME_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && ((bstate == 1) || (bstate == 2) || (bstate == 4) || (bstate == 5))) {
{
if(bstate == 4) {
_instance->Tron_dirBuff__var = B00000000;
}
if(bstate == 2) {
_instance->Tron_dirBuff__var = B00000001;
}
if(bstate == 1) {
_instance->Tron_dirBuff__var = B00000010;
}
if(bstate == 5) {
_instance->Tron_dirBuff__var = B00000011;
}
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
}
void Tron_handle_arduino_timeout(struct Tron_Instance *_instance, uint8_t id) {
uint8_t Tron_TronStateChart_State_event_consumed = 0;
if (_instance->Tron_TronStateChart_State == TRON_TRONSTATECHART_GAME_STATE) {
if (Tron_TronStateChart_State_event_consumed == 0 && _instance->Tron_lost__var) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_GAME_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_DEFEAT_STATE;
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_DEFEAT_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
else if (Tron_TronStateChart_State_event_consumed == 0 && _instance->Tron_won__var) {
Tron_TronStateChart_OnExit(TRON_TRONSTATECHART_GAME_STATE, _instance);
_instance->Tron_TronStateChart_State = TRON_TRONSTATECHART_VICTORY_STATE;
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_VICTORY_STATE, _instance);
Tron_TronStateChart_State_event_consumed = 1;
}
else if (Tron_TronStateChart_State_event_consumed == 0 &&  !(_instance->Tron_lost__var || _instance->Tron_won__var)) {
{
Tron_send_arduino_timer_start(_instance, _instance->Tron_timer__var, _instance->Tron_speed__var);
_instance->Tron_direction__var = _instance->Tron_dirBuff__var;
switch(_instance->Tron_direction__var) {
					case B00000000:
						
if(f_Tron_isInSnake(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var - 1)) {
_instance->Tron_lost__var = 1;
Tron_send_TronPort_loose(_instance, _instance->Tron_myID__var);
}
f_Tron_addHeadDir(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var - 1, _instance->Tron_direction__var);

					break;
					case B00000001:
						
if(f_Tron_isInSnake(_instance, _instance->Tron_headX__var + 1, _instance->Tron_headY__var)) {
_instance->Tron_lost__var = 1;
Tron_send_TronPort_loose(_instance, _instance->Tron_myID__var);
}
f_Tron_addHeadDir(_instance, _instance->Tron_headX__var + 1, _instance->Tron_headY__var, _instance->Tron_direction__var);

					break;
					case B00000010:
						
if(f_Tron_isInSnake(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var + 1)) {
_instance->Tron_lost__var = 1;
Tron_send_TronPort_loose(_instance, _instance->Tron_myID__var);
}
f_Tron_addHeadDir(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var + 1, _instance->Tron_direction__var);

					break;
					case B00000011:
						
if(f_Tron_isInSnake(_instance, _instance->Tron_headX__var - 1, _instance->Tron_headY__var)) {
_instance->Tron_lost__var = 1;
Tron_send_TronPort_loose(_instance, _instance->Tron_myID__var);
}
f_Tron_addHeadDir(_instance, _instance->Tron_headX__var - 1, _instance->Tron_headY__var, _instance->Tron_direction__var);

					break;
				}
if(f_Tron_outOfBound(_instance, _instance->Tron_headX__var, _instance->Tron_headY__var)) {
_instance->Tron_lost__var = 1;
Tron_send_TronPort_loose(_instance, _instance->Tron_myID__var);
}
}
Tron_TronStateChart_State_event_consumed = 1;
}
}
}

// Observers for outgoing messages:
void (*Tron_send_TronPort_addHead_listener)(struct Tron_Instance*, uint8_t, uint8_t, uint8_t)= 0x0;
void register_Tron_send_TronPort_addHead_listener(void (*_listener)(struct Tron_Instance*, uint8_t, uint8_t, uint8_t)){
Tron_send_TronPort_addHead_listener = _listener;
}
void Tron_send_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){
if (Tron_send_TronPort_addHead_listener != 0x0) Tron_send_TronPort_addHead_listener(_instance, x, y, id);
}
void (*Tron_send_TronPort_loose_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_TronPort_loose_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_TronPort_loose_listener = _listener;
}
void Tron_send_TronPort_loose(struct Tron_Instance *_instance, uint8_t id){
if (Tron_send_TronPort_loose_listener != 0x0) Tron_send_TronPort_loose_listener(_instance, id);
}
void (*Tron_send_TronPort_tronReady_listener)(struct Tron_Instance*)= 0x0;
void register_Tron_send_TronPort_tronReady_listener(void (*_listener)(struct Tron_Instance*)){
Tron_send_TronPort_tronReady_listener = _listener;
}
void Tron_send_TronPort_tronReady(struct Tron_Instance *_instance){
if (Tron_send_TronPort_tronReady_listener != 0x0) Tron_send_TronPort_tronReady_listener(_instance);
}
void (*Tron_send_TronPort_tronGo_listener)(struct Tron_Instance*)= 0x0;
void register_Tron_send_TronPort_tronGo_listener(void (*_listener)(struct Tron_Instance*)){
Tron_send_TronPort_tronGo_listener = _listener;
}
void Tron_send_TronPort_tronGo(struct Tron_Instance *_instance){
if (Tron_send_TronPort_tronGo_listener != 0x0) Tron_send_TronPort_tronGo_listener(_instance);
}
void (*Tron_send_button_button_state_listener)(struct Tron_Instance*)= 0x0;
void register_Tron_send_button_button_state_listener(void (*_listener)(struct Tron_Instance*)){
Tron_send_button_button_state_listener = _listener;
}
void Tron_send_button_button_state(struct Tron_Instance *_instance){
if (Tron_send_button_button_state_listener != 0x0) Tron_send_button_button_state_listener(_instance);
}
void (*Tron_send_lcd_print_num_listener)(struct Tron_Instance*, int16_t)= 0x0;
void register_Tron_send_lcd_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t)){
Tron_send_lcd_print_num_listener = _listener;
}
void Tron_send_lcd_print_num(struct Tron_Instance *_instance, int16_t num){
if (Tron_send_lcd_print_num_listener != 0x0) Tron_send_lcd_print_num_listener(_instance, num);
}
void (*Tron_send_lcd_print_dec_listener)(struct Tron_Instance*, double)= 0x0;
void register_Tron_send_lcd_print_dec_listener(void (*_listener)(struct Tron_Instance*, double)){
Tron_send_lcd_print_dec_listener = _listener;
}
void Tron_send_lcd_print_dec(struct Tron_Instance *_instance, double num){
if (Tron_send_lcd_print_dec_listener != 0x0) Tron_send_lcd_print_dec_listener(_instance, num);
}
void (*Tron_send_lcd_print_str_listener)(struct Tron_Instance*, char *)= 0x0;
void register_Tron_send_lcd_print_str_listener(void (*_listener)(struct Tron_Instance*, char *)){
Tron_send_lcd_print_str_listener = _listener;
}
void Tron_send_lcd_print_str(struct Tron_Instance *_instance, char * msg){
if (Tron_send_lcd_print_str_listener != 0x0) Tron_send_lcd_print_str_listener(_instance, msg);
}
void (*Tron_send_lcd_clear_listener)(struct Tron_Instance*)= 0x0;
void register_Tron_send_lcd_clear_listener(void (*_listener)(struct Tron_Instance*)){
Tron_send_lcd_clear_listener = _listener;
}
void Tron_send_lcd_clear(struct Tron_Instance *_instance){
if (Tron_send_lcd_clear_listener != 0x0) Tron_send_lcd_clear_listener(_instance);
}
void (*Tron_send_lcd_set_cursor_listener)(struct Tron_Instance*, uint8_t, uint8_t)= 0x0;
void register_Tron_send_lcd_set_cursor_listener(void (*_listener)(struct Tron_Instance*, uint8_t, uint8_t)){
Tron_send_lcd_set_cursor_listener = _listener;
}
void Tron_send_lcd_set_cursor(struct Tron_Instance *_instance, uint8_t c, uint8_t l){
if (Tron_send_lcd_set_cursor_listener != 0x0) Tron_send_lcd_set_cursor_listener(_instance, c, l);
}
void (*Tron_send_lcd_set_bgcolor_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_lcd_set_bgcolor_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_lcd_set_bgcolor_listener = _listener;
}
void Tron_send_lcd_set_bgcolor(struct Tron_Instance *_instance, uint8_t color){
if (Tron_send_lcd_set_bgcolor_listener != 0x0) Tron_send_lcd_set_bgcolor_listener(_instance, color);
}
void (*Tron_send_lcd_fillRect_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)= 0x0;
void register_Tron_send_lcd_fillRect_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)){
Tron_send_lcd_fillRect_listener = _listener;
}
void Tron_send_lcd_fillRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col){
if (Tron_send_lcd_fillRect_listener != 0x0) Tron_send_lcd_fillRect_listener(_instance, x, y, w, l, col);
}
void (*Tron_send_lcd_drawRect_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)= 0x0;
void register_Tron_send_lcd_drawRect_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)){
Tron_send_lcd_drawRect_listener = _listener;
}
void Tron_send_lcd_drawRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col){
if (Tron_send_lcd_drawRect_listener != 0x0) Tron_send_lcd_drawRect_listener(_instance, x, y, w, l, col);
}
void (*Tron_send_lcd_drawLine_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)= 0x0;
void register_Tron_send_lcd_drawLine_listener(void (*_listener)(struct Tron_Instance*, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t)){
Tron_send_lcd_drawLine_listener = _listener;
}
void Tron_send_lcd_drawLine(struct Tron_Instance *_instance, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t col){
if (Tron_send_lcd_drawLine_listener != 0x0) Tron_send_lcd_drawLine_listener(_instance, x1, y1, x2, y2, col);
}
void (*Tron_send_arduino_timer_start_listener)(struct Tron_Instance*, uint8_t, int16_t)= 0x0;
void register_Tron_send_arduino_timer_start_listener(void (*_listener)(struct Tron_Instance*, uint8_t, int16_t)){
Tron_send_arduino_timer_start_listener = _listener;
}
void Tron_send_arduino_timer_start(struct Tron_Instance *_instance, uint8_t id, int16_t time){
if (Tron_send_arduino_timer_start_listener != 0x0) Tron_send_arduino_timer_start_listener(_instance, id, time);
}
void (*Tron_send_arduino_timer_cancel_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_timer_cancel_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_timer_cancel_listener = _listener;
}
void Tron_send_arduino_timer_cancel(struct Tron_Instance *_instance, uint8_t id){
if (Tron_send_arduino_timer_cancel_listener != 0x0) Tron_send_arduino_timer_cancel_listener(_instance, id);
}
void (*Tron_send_arduino_serial_print_str_listener)(struct Tron_Instance*, char *)= 0x0;
void register_Tron_send_arduino_serial_print_str_listener(void (*_listener)(struct Tron_Instance*, char *)){
Tron_send_arduino_serial_print_str_listener = _listener;
}
void Tron_send_arduino_serial_print_str(struct Tron_Instance *_instance, char * msg){
if (Tron_send_arduino_serial_print_str_listener != 0x0) Tron_send_arduino_serial_print_str_listener(_instance, msg);
}
void (*Tron_send_arduino_serial_print_dec_listener)(struct Tron_Instance*, double)= 0x0;
void register_Tron_send_arduino_serial_print_dec_listener(void (*_listener)(struct Tron_Instance*, double)){
Tron_send_arduino_serial_print_dec_listener = _listener;
}
void Tron_send_arduino_serial_print_dec(struct Tron_Instance *_instance, double num){
if (Tron_send_arduino_serial_print_dec_listener != 0x0) Tron_send_arduino_serial_print_dec_listener(_instance, num);
}
void (*Tron_send_arduino_serial_print_num_listener)(struct Tron_Instance*, int16_t)= 0x0;
void register_Tron_send_arduino_serial_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t)){
Tron_send_arduino_serial_print_num_listener = _listener;
}
void Tron_send_arduino_serial_print_num(struct Tron_Instance *_instance, int16_t num){
if (Tron_send_arduino_serial_print_num_listener != 0x0) Tron_send_arduino_serial_print_num_listener(_instance, num);
}
void (*Tron_send_arduino_usb_print_str_listener)(struct Tron_Instance*, char *)= 0x0;
void register_Tron_send_arduino_usb_print_str_listener(void (*_listener)(struct Tron_Instance*, char *)){
Tron_send_arduino_usb_print_str_listener = _listener;
}
void Tron_send_arduino_usb_print_str(struct Tron_Instance *_instance, char * msg){
if (Tron_send_arduino_usb_print_str_listener != 0x0) Tron_send_arduino_usb_print_str_listener(_instance, msg);
}
void (*Tron_send_arduino_usb_print_dec_listener)(struct Tron_Instance*, double)= 0x0;
void register_Tron_send_arduino_usb_print_dec_listener(void (*_listener)(struct Tron_Instance*, double)){
Tron_send_arduino_usb_print_dec_listener = _listener;
}
void Tron_send_arduino_usb_print_dec(struct Tron_Instance *_instance, double num){
if (Tron_send_arduino_usb_print_dec_listener != 0x0) Tron_send_arduino_usb_print_dec_listener(_instance, num);
}
void (*Tron_send_arduino_usb_print_num_listener)(struct Tron_Instance*, int16_t)= 0x0;
void register_Tron_send_arduino_usb_print_num_listener(void (*_listener)(struct Tron_Instance*, int16_t)){
Tron_send_arduino_usb_print_num_listener = _listener;
}
void Tron_send_arduino_usb_print_num(struct Tron_Instance *_instance, int16_t num){
if (Tron_send_arduino_usb_print_num_listener != 0x0) Tron_send_arduino_usb_print_num_listener(_instance, num);
}
void (*Tron_send_arduino_setDigitalHigh_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_setDigitalHigh_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_setDigitalHigh_listener = _listener;
}
void Tron_send_arduino_setDigitalHigh(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_setDigitalHigh_listener != 0x0) Tron_send_arduino_setDigitalHigh_listener(_instance, pin);
}
void (*Tron_send_arduino_setDigitalLow_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_setDigitalLow_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_setDigitalLow_listener = _listener;
}
void Tron_send_arduino_setDigitalLow(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_setDigitalLow_listener != 0x0) Tron_send_arduino_setDigitalLow_listener(_instance, pin);
}
void (*Tron_send_arduino_setOutput_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_setOutput_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_setOutput_listener = _listener;
}
void Tron_send_arduino_setOutput(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_setOutput_listener != 0x0) Tron_send_arduino_setOutput_listener(_instance, pin);
}
void (*Tron_send_arduino_setInput_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_setInput_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_setInput_listener = _listener;
}
void Tron_send_arduino_setInput(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_setInput_listener != 0x0) Tron_send_arduino_setInput_listener(_instance, pin);
}
void (*Tron_send_arduino_readDigital_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_readDigital_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_readDigital_listener = _listener;
}
void Tron_send_arduino_readDigital(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_readDigital_listener != 0x0) Tron_send_arduino_readDigital_listener(_instance, pin);
}
void (*Tron_send_arduino_readAnalog_listener)(struct Tron_Instance*, uint8_t)= 0x0;
void register_Tron_send_arduino_readAnalog_listener(void (*_listener)(struct Tron_Instance*, uint8_t)){
Tron_send_arduino_readAnalog_listener = _listener;
}
void Tron_send_arduino_readAnalog(struct Tron_Instance *_instance, uint8_t pin){
if (Tron_send_arduino_readAnalog_listener != 0x0) Tron_send_arduino_readAnalog_listener(_instance, pin);
}

/*****************************************************************************
 * Headers for type : Adafruit_1_8pLCDShieldShield
 *****************************************************************************/


// BEGIN: Code from the c_header annotation Adafruit_1_8pLCDShieldShield

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>
#define TFT_CS 10
#define TFT_RST 9
#define TFT_DC 8
#define TFT_SCLK 13
#define TFT_MOSI 11
// END: Code from the c_header annotation Adafruit_1_8pLCDShieldShield

// Definition of the instance stuct:
struct Adafruit_1_8pLCDShieldShield_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State;
// Variables for the properties of the instance
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_bpin__var;
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var;
};

// Declaration of prototypes outgoing messages:
void Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(int state, struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_handle_button_button_state(struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_handle_lcd_drawRect(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col);
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_str(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, char * msg);
void Adafruit_1_8pLCDShieldShield_handle_lcd_clear(struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_handle_lcd_fillRect(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col);
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_num(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, int16_t num);
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_dec(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, double num);
void Adafruit_1_8pLCDShieldShield_handle_lcd_set_cursor(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t c, uint8_t l);
void Adafruit_1_8pLCDShieldShield_handle_lcd_drawLine(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t col);
void Adafruit_1_8pLCDShieldShield_handle_arduino_100ms_interrupt(struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_handle_arduino_ready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_handle_arduino_readAnalogResponse(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin, int res);
// Declaration of callbacks for incomming messages:
void register_Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t));
void register_Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t));
void register_Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, char *));
void register_Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t));
void register_Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t));
void register_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*));

// Definition of the states:
#define ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_STATE 0
#define ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE 1
#define ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE 2
#define ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE 3

/*****************************************************************************
 * Implementation for type : Adafruit_1_8pLCDShieldShield
 *****************************************************************************/


// BEGIN: Code from the c_global annotation Adafruit_1_8pLCDShieldShield

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

// END: Code from the c_global annotation Adafruit_1_8pLCDShieldShield

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnExit(int state, struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
void Adafruit_1_8pLCDShieldShield_send_arduino_setInput(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin);
void Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin);
void Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, char * msg);
void Adafruit_1_8pLCDShieldShield_send_button_button_state_response(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate);
void Adafruit_1_8pLCDShieldShield_send_button_button_state_change(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate);
void Adafruit_1_8pLCDShieldShield_send_lcd_LCDready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:

// On Entry Actions:
void Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(int state, struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
switch(state) {
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_STATE:
_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State = ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE;
{
}
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State, _instance);
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE:
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE:
{
Adafruit_1_8pLCDShieldShield_send_arduino_setInput(_instance, _instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_bpin__var);
tft.initR(INITR_BLACKTAB);
			tft.fillScreen(0x0000);
			tft.setTextColor(0xFFFF);
}
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE:
break;
default: break;
}
}

// On Exit Actions:
void Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnExit(int state, struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
switch(state) {
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_STATE:
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnExit(_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State, _instance);
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE:
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE:
break;
case ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void Adafruit_1_8pLCDShieldShield_handle_button_button_state(struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
{
Adafruit_1_8pLCDShieldShield_send_button_button_state_response(_instance, _instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var);
}
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_drawRect(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.drawRect(x,y,w,l,col);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_str(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, char * msg) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.print(msg);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_clear(struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.fillScreen(0x0000);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_fillRect(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.fillRect(x,y,w,l,col);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_num(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, int16_t num) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.print(num);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_print_dec(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, double num) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.print(num);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_set_cursor(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t c, uint8_t l) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.setCursor(c, l);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_lcd_drawLine(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t col) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
tft.drawLine(x1,y1,x2,y2,col);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_arduino_100ms_interrupt(struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
{
Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog(_instance, _instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_bpin__var);
}
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_arduino_ready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnExit(ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE, _instance);
_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State = ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE;
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE, _instance);
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_arduino_readAnalogResponse(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin, int res) {
uint8_t Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 0;
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE) {
if (Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed == 0 && 1) {
{
int joystickState =res;
				int bstatetmp = 0;
			    if (joystickState < 50) {bstatetmp = 1;}
			    else if (joystickState < 150) {bstatetmp = 2;}
			    else if (joystickState < 250) {bstatetmp = 3;}
			    else if (joystickState < 500) {bstatetmp = 4;}
			    else if (joystickState < 650) {bstatetmp = 5;}
if( !(_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var == bstatetmp)) {
_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var = bstatetmp;
Adafruit_1_8pLCDShieldShield_send_button_button_state_change(_instance, _instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var);
}
_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_Idle_bstate__var = bstatetmp;
}
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State_event_consumed = 1;
}
}
}
void Adafruit_1_8pLCDShieldShield_handle_empty_event(struct Adafruit_1_8pLCDShieldShield_Instance *_instance) {
if (_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State == ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE) {
if (1) {
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnExit(ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_SETUP_STATE, _instance);
_instance->Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State = ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE;
{
Adafruit_1_8pLCDShieldShield_send_lcd_LCDready(_instance);
}
Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_IDLE_STATE, _instance);
}
}
}

// Observers for outgoing messages:
void (*Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)){
Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_arduino_setInput(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin){
if (Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener(_instance, pin);
}
void (*Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)){
Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin){
if (Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener(_instance, pin);
}
void (*Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, char *)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, char *)){
Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, char * msg){
if (Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener(_instance, msg);
}
void (*Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)){
Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_button_button_state_response(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if (Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener(_instance, bstate);
}
void (*Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*, uint8_t)){
Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_button_button_state_change(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if (Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener(_instance, bstate);
}
void (*Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*)= 0x0;
void register_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener(void (*_listener)(struct Adafruit_1_8pLCDShieldShield_Instance*)){
Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener = _listener;
}
void Adafruit_1_8pLCDShieldShield_send_lcd_LCDready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance){
if (Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener != 0x0) Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener(_instance);
}

/*****************************************************************************
 * Headers for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_header annotation ArduinoScheduler

#define NB_SOFT_TIMERS 4 // for 4 different timers, 0 to 3. change here to get more or less timers.

// END: Code from the c_header annotation ArduinoScheduler

// Definition of the instance stuct:
struct ArduinoScheduler_Instance {
// Variables for the ID of the instance
int id;
// Variables for the current instance state
int ArduinoScheduler_ArduinoSchedulerStateChart_State;
// Variables for the properties of the instance
uint8_t ArduinoScheduler_interrupt_counter__var;
long ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[NB_SOFT_TIMERS];
long ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var;
};

// Declaration of prototypes outgoing messages:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg);
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time);
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num);
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin);
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num);
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance);
// Declaration of callbacks for incomming messages:
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*));
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t));
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char));
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t));
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int));

// Definition of the states:
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE 0
#define ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE 1

/*****************************************************************************
 * Implementation for type : ArduinoScheduler
 *****************************************************************************/


// BEGIN: Code from the c_global annotation ArduinoScheduler

struct ArduinoScheduler_Instance *_ArduinoScheduler_instance;
uint8_t interrupt_counter = 0;

// END: Code from the c_global annotation ArduinoScheduler

// Declaration of prototypes:
#ifdef EXTERN_C_PROTOTYPES
extern "C" {
#endif
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance);
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id);
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c);
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState);
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res);
void f_ArduinoScheduler_initialize_timer2(struct ArduinoScheduler_Instance *_instance);
SIGNAL(TIMER2_OVF_vect);
#ifdef EXTERN_C_PROTOTYPES
}
#endif

// Declaration of functions:
// Definition of function initialize_timer2
void f_ArduinoScheduler_initialize_timer2(struct ArduinoScheduler_Instance *_instance) {
{
// Store the instance in a global variable so that the interrupt routine can use it
		_ArduinoScheduler_instance = _instance;
		
		// Run timer2 interrupt up counting at 250kHz 
		 TCCR2A = 0;
		 TCCR2B = 1<<CS22 | 0<<CS21 | 0<<CS20;
		
		 //Timer2 Overflow Interrupt Enable
		 TIMSK2 |= 1<<TOIE2;
		
}
}

// Definition of function timer2_overflow_interrupt
SIGNAL(TIMER2_OVF_vect) {
{
TCNT2 = 5; // Leave 250 tics until overflow (1 overflow every 1ms)
interrupt_counter++;
if(interrupt_counter >= 99) {
ArduinoScheduler_send_arduino_100ms_interrupt(_ArduinoScheduler_instance);
interrupt_counter=0;
}
if(interrupt_counter % 4) {
ArduinoScheduler_send_arduino_4ms_interrupt(_ArduinoScheduler_instance);
}
}
}


// On Entry Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
{
Serial.begin(9600);
}
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// On Exit Actions:
void ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(int state, struct ArduinoScheduler_Instance *_instance) {
switch(state) {
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE:
ArduinoScheduler_ArduinoSchedulerStateChart_OnExit(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_State, _instance);
break;
case ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE:
break;
default: break;
}
}

// Event Handlers for incoming messages:
void ArduinoScheduler_handle_arduino_usb_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readAnalog(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
ArduinoScheduler_send_arduino_readAnalogResponse(_instance, pin, analogRead(pin));
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalLow(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, LOW);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setDigitalHigh(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
digitalWrite(pin, HIGH);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_str(struct ArduinoScheduler_Instance *_instance, char * msg) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(msg);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_start(struct ArduinoScheduler_Instance *_instance, uint8_t id, int16_t time) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = millis() + time - 1;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setInput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,INPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_timer_cancel(struct ArduinoScheduler_Instance *_instance, uint8_t id) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if(id < NB_SOFT_TIMERS) _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[id] = 0;
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_usb_print_dec(struct ArduinoScheduler_Instance *_instance, double num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_readDigital(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
if((digitalRead(pin) == HIGH)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_HIGH);
}
if((digitalRead(pin) == LOW)) {
ArduinoScheduler_send_arduino_readDigitalResponse(_instance, pin, DIGITALSTATE_LOW);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_setOutput(struct ArduinoScheduler_Instance *_instance, uint8_t pin) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
pinMode(pin,OUTPUT);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_arduino_serial_print_num(struct ArduinoScheduler_Instance *_instance, int16_t num) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
Serial.print(num);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_polling_setup(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
f_ArduinoScheduler_initialize_timer2(_instance);
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = millis() + 1000;
ArduinoScheduler_send_arduino_ready(_instance);
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}
void ArduinoScheduler_handle_polling_poll(struct ArduinoScheduler_Instance *_instance) {
uint8_t ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 0;
if (1) {
{
long tms = millis();
uint8_t t = 0;
while(t < NB_SOFT_TIMERS) {
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] > 0 && _instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_timers__var[t] = 0;
ArduinoScheduler_send_arduino_timeout(_instance, t);
}
t = t + 1;
}
if(_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var < tms) {
_instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var = _instance->ArduinoScheduler_ArduinoSchedulerStateChart_prev_1sec__var + 1000;
ArduinoScheduler_send_arduino_1s_poll(_instance);
}
}
ArduinoScheduler_ArduinoSchedulerStateChart_State_event_consumed = 1;
}
}

// Observers for outgoing messages:
void (*ArduinoScheduler_send_arduino_ready_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_ready_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_ready_listener = _listener;
}
void ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_ready_listener != 0x0) ArduinoScheduler_send_arduino_ready_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_4ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_4ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_4ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_4ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_100ms_interrupt_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_100ms_interrupt_listener = _listener;
}
void ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_100ms_interrupt_listener != 0x0) ArduinoScheduler_send_arduino_100ms_interrupt_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_1s_poll_listener)(struct ArduinoScheduler_Instance*)= 0x0;
void register_ArduinoScheduler_send_arduino_1s_poll_listener(void (*_listener)(struct ArduinoScheduler_Instance*)){
ArduinoScheduler_send_arduino_1s_poll_listener = _listener;
}
void ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (ArduinoScheduler_send_arduino_1s_poll_listener != 0x0) ArduinoScheduler_send_arduino_1s_poll_listener(_instance);
}
void (*ArduinoScheduler_send_arduino_timeout_listener)(struct ArduinoScheduler_Instance*, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_timeout_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t)){
ArduinoScheduler_send_arduino_timeout_listener = _listener;
}
void ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (ArduinoScheduler_send_arduino_timeout_listener != 0x0) ArduinoScheduler_send_arduino_timeout_listener(_instance, id);
}
void (*ArduinoScheduler_send_arduino_serial_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_serial_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_serial_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_serial_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_serial_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_usb_rx_char_listener)(struct ArduinoScheduler_Instance*, char)= 0x0;
void register_ArduinoScheduler_send_arduino_usb_rx_char_listener(void (*_listener)(struct ArduinoScheduler_Instance*, char)){
ArduinoScheduler_send_arduino_usb_rx_char_listener = _listener;
}
void ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (ArduinoScheduler_send_arduino_usb_rx_char_listener != 0x0) ArduinoScheduler_send_arduino_usb_rx_char_listener(_instance, c);
}
void (*ArduinoScheduler_send_arduino_readDigitalResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)= 0x0;
void register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, uint8_t)){
ArduinoScheduler_send_arduino_readDigitalResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (ArduinoScheduler_send_arduino_readDigitalResponse_listener != 0x0) ArduinoScheduler_send_arduino_readDigitalResponse_listener(_instance, pin, DigitalState);
}
void (*ArduinoScheduler_send_arduino_readAnalogResponse_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)= 0x0;
void register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(void (*_listener)(struct ArduinoScheduler_Instance*, uint8_t, int)){
ArduinoScheduler_send_arduino_readAnalogResponse_listener = _listener;
}
void ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (ArduinoScheduler_send_arduino_readAnalogResponse_listener != 0x0) ArduinoScheduler_send_arduino_readAnalogResponse_listener(_instance, pin, res);
}


/*****************************************************************************
 * Definitions for configuration : TronCfg
 *****************************************************************************/

#define MAX_INSTANCES 32
#define FIFO_SIZE 256

/*********************************
 * Instance IDs and lookup
 *********************************/

void * instances[MAX_INSTANCES];
uint16_t instances_count = 0;

void * instance_by_id(uint16_t id) {
  return instances[id];
}

uint16_t add_instance(void * instance_struct) {
  instances[instances_count] = instance_struct;
  return instances_count++;
}

/******************************************
 * Simple byte FIFO implementation
 ******************************************/

byte fifo[FIFO_SIZE];
int fifo_head = 0;
int fifo_tail = 0;

// Returns the number of byte currently in the fifo
int fifo_byte_length() {
  if (fifo_tail >= fifo_head)
    return fifo_tail - fifo_head;
  return fifo_tail + FIFO_SIZE - fifo_head;
}

// Returns the number of bytes currently available in the fifo
int fifo_byte_available() {
  return FIFO_SIZE - 1 - fifo_byte_length();
}

// Returns true if the fifo is empty
int fifo_empty() {
  return fifo_head == fifo_tail;
}

// Return true if the fifo is full
int fifo_full() {
  return fifo_head == ((fifo_tail + 1) % FIFO_SIZE);
}

// Enqueue 1 byte in the fifo if there is space
// returns 1 for sucess and 0 if the fifo was full
int fifo_enqueue(byte b) {
  int new_tail = (fifo_tail + 1) % FIFO_SIZE;
  if (new_tail == fifo_head) return 0; // the fifo is full
  fifo[fifo_tail] = b;
  fifo_tail = new_tail;
  return 1;
}

// Enqueue 1 byte in the fifo without checking for available space
// The caller should have checked that there is enough space
int _fifo_enqueue(byte b) {
  fifo[fifo_tail] = b;
  fifo_tail = (fifo_tail + 1) % FIFO_SIZE;
}

// Dequeue 1 byte in the fifo.
// The caller should check that the fifo is not empty
byte fifo_dequeue() {
  if (!fifo_empty()) {
    byte result = fifo[fifo_head];
    fifo_head = (fifo_head + 1) % FIFO_SIZE;
    return result;
  }
  return 0;
}

/*
void _fifo_enqueue_ptr(void * ptr) {
  int i;
  ptr_union_t proxy;
  proxy.pointer = ptr;
  for (i = 0; i<PTR_MAX_SIZE; i++) _fifo_enqueue(proxy.buffer[i]);
}

void * _fifo_dequeue_ptr() {
  int i;
  ptr_union_t proxy;
  for (i = 0; i<PTR_MAX_SIZE; i++) proxy.buffer[i] = _fifo_dequeue();
  return proxy.pointer;
}
*/
//Declaration of instance variables
struct Adafruit_1_8pLCDShieldShield_Instance TronCfg_myLCD_var;
struct ArduinoScheduler_Instance TronCfg_arduinoScheduler_var;
struct Tron_Instance TronCfg_tron_var;
struct VirtualPort_Instance TronCfg_virtualSerial_var;

// Enqueue of messages Tron::TronPort::loose
void enqueue_Tron_send_TronPort_loose(struct Tron_Instance *_instance, uint8_t id){

forwardByteSerial_Start();
forwardByteSerial_TTL();

forwardByteSerial( (7 >> 8) & 0xFF );
forwardByteSerial( 7 & 0xFF );

// ID of the source instance
forwardByteSerial( (TronCfg_virtualSerial_var.id >> 8) & 0xFF );
forwardByteSerial( TronCfg_virtualSerial_var.id & 0xFF );

// parameter id
forwardByteSerial(id & 0xFF);

forwardByteSerial_Stop();
}
// Enqueue of messages Tron::TronPort::addHead
void enqueue_Tron_send_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){


forwardByteSerial_Start();
forwardByteSerial_TTL();

forwardByteSerial( (6 >> 8) & 0xFF );
forwardByteSerial( 6 & 0xFF );

// ID of the source instance
forwardByteSerial( (TronCfg_virtualSerial_var.id >> 8) & 0xFF );
forwardByteSerial( TronCfg_virtualSerial_var.id & 0xFF );

// parameter id
forwardByteSerial(x & 0xFF);
forwardByteSerial(y & 0xFF);
forwardByteSerial(id & 0xFF);

forwardByteSerial_Stop();
}
// Enqueue of messages Tron::TronPort::tronReady
void enqueue_Tron_send_TronPort_tronReady(struct Tron_Instance *_instance){

forwardByteSerial_Start();
forwardByteSerial_TTL();

forwardByteSerial( (9 >> 8) & 0xFF );
forwardByteSerial( 9 & 0xFF );

// ID of the source instance
forwardByteSerial( (TronCfg_virtualSerial_var.id >> 8) & 0xFF );
forwardByteSerial( TronCfg_virtualSerial_var.id & 0xFF );

forwardByteSerial_Stop();

}
// Enqueue of messages Tron::TronPort::tronGo
void enqueue_Tron_send_TronPort_tronGo(struct Tron_Instance *_instance){

forwardByteSerial_Start();
forwardByteSerial_TTL();

forwardByteSerial( (8 >> 8) & 0xFF );
forwardByteSerial( 8 & 0xFF );

// ID of the source instance
forwardByteSerial( (TronCfg_virtualSerial_var.id >> 8) & 0xFF );
forwardByteSerial( TronCfg_virtualSerial_var.id & 0xFF );

forwardByteSerial_Stop();
}
// Enqueue of messages Tron::button::button_state
void enqueue_Tron_send_button_button_state(struct Tron_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (5 >> 8) & 0xFF );
_fifo_enqueue( 5 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages VirtualPort::TronPort::addHead
void enqueue_VirtualPort_send_TronPort_addHead(struct VirtualPort_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){
if ( fifo_byte_available() > 7 ) {

_fifo_enqueue( (6 >> 8) & 0xFF );
_fifo_enqueue( 6 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter x
_fifo_enqueue(x & 0xFF);

// parameter y
_fifo_enqueue(y & 0xFF);

// parameter id
_fifo_enqueue(id & 0xFF);
}
}
// Enqueue of messages VirtualPort::TronPort::loose
void enqueue_VirtualPort_send_TronPort_loose(struct VirtualPort_Instance *_instance, uint8_t id){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (7 >> 8) & 0xFF );
_fifo_enqueue( 7 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter id
_fifo_enqueue(id & 0xFF);
}
}
// Enqueue of messages VirtualPort::TronPort::tronGo
void enqueue_VirtualPort_send_TronPort_tronGo(struct VirtualPort_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (8 >> 8) & 0xFF );
_fifo_enqueue( 8 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages VirtualPort::TronPort::tronReady
void enqueue_VirtualPort_send_TronPort_tronReady(struct VirtualPort_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (9 >> 8) & 0xFF );
_fifo_enqueue( 9 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}
// Enqueue of messages Adafruit_1_8pLCDShieldShield::button::button_state_change
void enqueue_Adafruit_1_8pLCDShieldShield_send_button_button_state_change(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (10 >> 8) & 0xFF );
_fifo_enqueue( 10 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter bstate
_fifo_enqueue(bstate & 0xFF);
}
}
// Enqueue of messages Adafruit_1_8pLCDShieldShield::button::button_state_response
void enqueue_Adafruit_1_8pLCDShieldShield_send_button_button_state_response(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if ( fifo_byte_available() > 5 ) {

_fifo_enqueue( (11 >> 8) & 0xFF );
_fifo_enqueue( 11 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );

// parameter bstate
_fifo_enqueue(bstate & 0xFF);
}
}
// Enqueue of messages Adafruit_1_8pLCDShieldShield::lcd::LCDready
void enqueue_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance){
if ( fifo_byte_available() > 4 ) {

_fifo_enqueue( (12 >> 8) & 0xFF );
_fifo_enqueue( 12 & 0xFF );

// ID of the source instance
_fifo_enqueue( (_instance->id >> 8) & 0xFF );
_fifo_enqueue( _instance->id & 0xFF );
}
}

// Dispatch for messages VirtualPort::TronPort::addHead
void dispatch_VirtualPort_send_TronPort_addHead(struct VirtualPort_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){
if (_instance == &TronCfg_virtualSerial_var) {
Tron_handle_TronPort_addHead(&TronCfg_tron_var, x, y, id);
}
}
// Dispatch for messages VirtualPort::TronPort::loose
void dispatch_VirtualPort_send_TronPort_loose(struct VirtualPort_Instance *_instance, uint8_t id){
if (_instance == &TronCfg_virtualSerial_var) {
Tron_handle_TronPort_loose(&TronCfg_tron_var, id);
}
}
// Dispatch for messages VirtualPort::TronPort::tronGo
void dispatch_VirtualPort_send_TronPort_tronGo(struct VirtualPort_Instance *_instance){
if (_instance == &TronCfg_virtualSerial_var) {
Tron_handle_TronPort_tronGo(&TronCfg_tron_var);
}
}
// Dispatch for messages VirtualPort::TronPort::tronReady
void dispatch_VirtualPort_send_TronPort_tronReady(struct VirtualPort_Instance *_instance){
if (_instance == &TronCfg_virtualSerial_var) {
Tron_handle_TronPort_tronReady(&TronCfg_tron_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::4ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_4ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &TronCfg_arduinoScheduler_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::readDigitalResponse
void dispatch_ArduinoScheduler_send_arduino_readDigitalResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, uint8_t DigitalState){
if (_instance == &TronCfg_arduinoScheduler_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::100ms_interrupt
void dispatch_ArduinoScheduler_send_arduino_100ms_interrupt(struct ArduinoScheduler_Instance *_instance){
if (_instance == &TronCfg_arduinoScheduler_var) {
Adafruit_1_8pLCDShieldShield_handle_arduino_100ms_interrupt(&TronCfg_myLCD_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::serial_rx_char
void dispatch_ArduinoScheduler_send_arduino_serial_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &TronCfg_arduinoScheduler_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::usb_rx_char
void dispatch_ArduinoScheduler_send_arduino_usb_rx_char(struct ArduinoScheduler_Instance *_instance, char c){
if (_instance == &TronCfg_arduinoScheduler_var) {
}
}
// Dispatch for messages ArduinoScheduler::arduino::timeout
void dispatch_ArduinoScheduler_send_arduino_timeout(struct ArduinoScheduler_Instance *_instance, uint8_t id){
if (_instance == &TronCfg_arduinoScheduler_var) {
Tron_handle_arduino_timeout(&TronCfg_tron_var, id);
}
}
// Dispatch for messages ArduinoScheduler::arduino::ready
void dispatch_ArduinoScheduler_send_arduino_ready(struct ArduinoScheduler_Instance *_instance){
if (_instance == &TronCfg_arduinoScheduler_var) {
Adafruit_1_8pLCDShieldShield_handle_arduino_ready(&TronCfg_myLCD_var);
}
}
// Dispatch for messages ArduinoScheduler::arduino::readAnalogResponse
void dispatch_ArduinoScheduler_send_arduino_readAnalogResponse(struct ArduinoScheduler_Instance *_instance, uint8_t pin, int res){
if (_instance == &TronCfg_arduinoScheduler_var) {
Adafruit_1_8pLCDShieldShield_handle_arduino_readAnalogResponse(&TronCfg_myLCD_var, pin, res);
}
}
// Dispatch for messages ArduinoScheduler::arduino::1s_poll
void dispatch_ArduinoScheduler_send_arduino_1s_poll(struct ArduinoScheduler_Instance *_instance){
if (_instance == &TronCfg_arduinoScheduler_var) {
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::arduino::readAnalog
void dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_myLCD_var) {
ArduinoScheduler_handle_arduino_readAnalog(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::arduino::serial_print_str
void dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, char * msg){
if (_instance == &TronCfg_myLCD_var) {
ArduinoScheduler_handle_arduino_serial_print_str(&TronCfg_arduinoScheduler_var, msg);
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::arduino::setInput
void dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_setInput(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_myLCD_var) {
ArduinoScheduler_handle_arduino_setInput(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::button::button_state_change
void dispatch_Adafruit_1_8pLCDShieldShield_send_button_button_state_change(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if (_instance == &TronCfg_myLCD_var) {
Tron_handle_button_button_state_change(&TronCfg_tron_var, bstate);
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::button::button_state_response
void dispatch_Adafruit_1_8pLCDShieldShield_send_button_button_state_response(struct Adafruit_1_8pLCDShieldShield_Instance *_instance, uint8_t bstate){
if (_instance == &TronCfg_myLCD_var) {
}
}
// Dispatch for messages Adafruit_1_8pLCDShieldShield::lcd::LCDready
void dispatch_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready(struct Adafruit_1_8pLCDShieldShield_Instance *_instance){
if (_instance == &TronCfg_myLCD_var) {
Tron_handle_lcd_LCDready(&TronCfg_tron_var);
}
}
// Dispatch for messages Tron::TronPort::addHead
void dispatch_Tron_send_TronPort_addHead(struct Tron_Instance *_instance, uint8_t x, uint8_t y, uint8_t id){
if (_instance == &TronCfg_tron_var) {
}
}
// Dispatch for messages Tron::TronPort::loose
void dispatch_Tron_send_TronPort_loose(struct Tron_Instance *_instance, uint8_t id){
if (_instance == &TronCfg_tron_var) {
}
}
// Dispatch for messages Tron::TronPort::tronGo
void dispatch_Tron_send_TronPort_tronGo(struct Tron_Instance *_instance){
if (_instance == &TronCfg_tron_var) {
}
}
// Dispatch for messages Tron::TronPort::tronReady
void dispatch_Tron_send_TronPort_tronReady(struct Tron_Instance *_instance){
if (_instance == &TronCfg_tron_var) {
}
}
// Dispatch for messages Tron::button::button_state
void dispatch_Tron_send_button_button_state(struct Tron_Instance *_instance){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_button_button_state(&TronCfg_myLCD_var);
}
}
// Dispatch for messages Tron::lcd::set_bgcolor
void dispatch_Tron_send_lcd_set_bgcolor(struct Tron_Instance *_instance, uint8_t color){
if (_instance == &TronCfg_tron_var) {
}
}
// Dispatch for messages Tron::lcd::drawRect
void dispatch_Tron_send_lcd_drawRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_drawRect(&TronCfg_myLCD_var, x, y, w, l, col);
}
}
// Dispatch for messages Tron::lcd::print_str
void dispatch_Tron_send_lcd_print_str(struct Tron_Instance *_instance, char * msg){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_print_str(&TronCfg_myLCD_var, msg);
}
}
// Dispatch for messages Tron::lcd::clear
void dispatch_Tron_send_lcd_clear(struct Tron_Instance *_instance){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_clear(&TronCfg_myLCD_var);
}
}
// Dispatch for messages Tron::lcd::fillRect
void dispatch_Tron_send_lcd_fillRect(struct Tron_Instance *_instance, uint16_t x, uint16_t y, uint16_t w, uint16_t l, uint16_t col){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_fillRect(&TronCfg_myLCD_var, x, y, w, l, col);
}
}
// Dispatch for messages Tron::lcd::print_num
void dispatch_Tron_send_lcd_print_num(struct Tron_Instance *_instance, int16_t num){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_print_num(&TronCfg_myLCD_var, num);
}
}
// Dispatch for messages Tron::lcd::print_dec
void dispatch_Tron_send_lcd_print_dec(struct Tron_Instance *_instance, double num){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_print_dec(&TronCfg_myLCD_var, num);
}
}
// Dispatch for messages Tron::lcd::set_cursor
void dispatch_Tron_send_lcd_set_cursor(struct Tron_Instance *_instance, uint8_t c, uint8_t l){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_set_cursor(&TronCfg_myLCD_var, c, l);
}
}
// Dispatch for messages Tron::lcd::drawLine
void dispatch_Tron_send_lcd_drawLine(struct Tron_Instance *_instance, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t col){
if (_instance == &TronCfg_tron_var) {
Adafruit_1_8pLCDShieldShield_handle_lcd_drawLine(&TronCfg_myLCD_var, x1, y1, x2, y2, col);
}
}
// Dispatch for messages Tron::arduino::usb_print_num
void dispatch_Tron_send_arduino_usb_print_num(struct Tron_Instance *_instance, int16_t num){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_usb_print_num(&TronCfg_arduinoScheduler_var, num);
}
}
// Dispatch for messages Tron::arduino::serial_print_dec
void dispatch_Tron_send_arduino_serial_print_dec(struct Tron_Instance *_instance, double num){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_serial_print_dec(&TronCfg_arduinoScheduler_var, num);
}
}
// Dispatch for messages Tron::arduino::readAnalog
void dispatch_Tron_send_arduino_readAnalog(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_readAnalog(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::setDigitalLow
void dispatch_Tron_send_arduino_setDigitalLow(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_setDigitalLow(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::usb_print_str
void dispatch_Tron_send_arduino_usb_print_str(struct Tron_Instance *_instance, char * msg){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_usb_print_str(&TronCfg_arduinoScheduler_var, msg);
}
}
// Dispatch for messages Tron::arduino::setDigitalHigh
void dispatch_Tron_send_arduino_setDigitalHigh(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_setDigitalHigh(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::serial_print_str
void dispatch_Tron_send_arduino_serial_print_str(struct Tron_Instance *_instance, char * msg){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_serial_print_str(&TronCfg_arduinoScheduler_var, msg);
}
}
// Dispatch for messages Tron::arduino::timer_start
void dispatch_Tron_send_arduino_timer_start(struct Tron_Instance *_instance, uint8_t id, int16_t time){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_timer_start(&TronCfg_arduinoScheduler_var, id, time);
}
}
// Dispatch for messages Tron::arduino::setInput
void dispatch_Tron_send_arduino_setInput(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_setInput(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::timer_cancel
void dispatch_Tron_send_arduino_timer_cancel(struct Tron_Instance *_instance, uint8_t id){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_timer_cancel(&TronCfg_arduinoScheduler_var, id);
}
}
// Dispatch for messages Tron::arduino::usb_print_dec
void dispatch_Tron_send_arduino_usb_print_dec(struct Tron_Instance *_instance, double num){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_usb_print_dec(&TronCfg_arduinoScheduler_var, num);
}
}
// Dispatch for messages Tron::arduino::readDigital
void dispatch_Tron_send_arduino_readDigital(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_readDigital(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::setOutput
void dispatch_Tron_send_arduino_setOutput(struct Tron_Instance *_instance, uint8_t pin){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_setOutput(&TronCfg_arduinoScheduler_var, pin);
}
}
// Dispatch for messages Tron::arduino::serial_print_num
void dispatch_Tron_send_arduino_serial_print_num(struct Tron_Instance *_instance, int16_t num){
if (_instance == &TronCfg_tron_var) {
ArduinoScheduler_handle_arduino_serial_print_num(&TronCfg_arduinoScheduler_var, num);
}
}

void processMessageQueue() {
if (fifo_empty()) return; // return if there is nothing to do

byte mbuf[5];
uint8_t mbufi = 0;

// Read the code of the next port/message in the queue
uint16_t code = fifo_dequeue() << 8;

code += fifo_dequeue();

// Switch to call the appropriate handler
switch(code) {
case 6:
while (mbufi < 5) mbuf[mbufi++] = fifo_dequeue();
dispatch_VirtualPort_send_TronPort_addHead((struct VirtualPort_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* x */ ,
mbuf[3] /* y */ ,
mbuf[4] /* id */ );
break;
case 7:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_VirtualPort_send_TronPort_loose((struct VirtualPort_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* id */ );
break;
case 8:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_VirtualPort_send_TronPort_tronGo((struct VirtualPort_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 9:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_VirtualPort_send_TronPort_tronReady((struct VirtualPort_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 10:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_Adafruit_1_8pLCDShieldShield_send_button_button_state_change((struct Adafruit_1_8pLCDShieldShield_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* bstate */ );
break;
case 11:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_Adafruit_1_8pLCDShieldShield_send_button_button_state_response((struct Adafruit_1_8pLCDShieldShield_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* bstate */ );
break;
case 12:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready((struct Adafruit_1_8pLCDShieldShield_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 1:
while (mbufi < 5) mbuf[mbufi++] = fifo_dequeue();
dispatch_Tron_send_TronPort_addHead((struct Tron_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* x */ ,
mbuf[3] /* y */ ,
mbuf[4] /* id */ );
break;
case 2:
while (mbufi < 3) mbuf[mbufi++] = fifo_dequeue();
dispatch_Tron_send_TronPort_loose((struct Tron_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */,
mbuf[2] /* id */ );
break;
case 3:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Tron_send_TronPort_tronGo((struct Tron_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 4:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Tron_send_TronPort_tronReady((struct Tron_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
case 5:
while (mbufi < 2) mbuf[mbufi++] = fifo_dequeue();
dispatch_Tron_send_button_button_state((struct Tron_Instance*)instance_by_id((mbuf[0] << 8) + mbuf[1]) /* instance */);
break;
}
}

void initialize_configuration_TronCfg() {
// Initialize connectors
register_Adafruit_1_8pLCDShieldShield_send_arduino_setInput_listener(dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_setInput);
register_Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog_listener(dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_readAnalog);
register_Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str_listener(dispatch_Adafruit_1_8pLCDShieldShield_send_arduino_serial_print_str);
register_Adafruit_1_8pLCDShieldShield_send_button_button_state_response_listener(enqueue_Adafruit_1_8pLCDShieldShield_send_button_button_state_response);
register_Adafruit_1_8pLCDShieldShield_send_button_button_state_change_listener(enqueue_Adafruit_1_8pLCDShieldShield_send_button_button_state_change);
register_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready_listener(enqueue_Adafruit_1_8pLCDShieldShield_send_lcd_LCDready);
register_ArduinoScheduler_send_arduino_ready_listener(dispatch_ArduinoScheduler_send_arduino_ready);
register_ArduinoScheduler_send_arduino_4ms_interrupt_listener(dispatch_ArduinoScheduler_send_arduino_4ms_interrupt);
register_ArduinoScheduler_send_arduino_100ms_interrupt_listener(dispatch_ArduinoScheduler_send_arduino_100ms_interrupt);
register_ArduinoScheduler_send_arduino_1s_poll_listener(dispatch_ArduinoScheduler_send_arduino_1s_poll);
register_ArduinoScheduler_send_arduino_timeout_listener(dispatch_ArduinoScheduler_send_arduino_timeout);
register_ArduinoScheduler_send_arduino_serial_rx_char_listener(dispatch_ArduinoScheduler_send_arduino_serial_rx_char);
register_ArduinoScheduler_send_arduino_usb_rx_char_listener(dispatch_ArduinoScheduler_send_arduino_usb_rx_char);
register_ArduinoScheduler_send_arduino_readDigitalResponse_listener(dispatch_ArduinoScheduler_send_arduino_readDigitalResponse);
register_ArduinoScheduler_send_arduino_readAnalogResponse_listener(dispatch_ArduinoScheduler_send_arduino_readAnalogResponse);
register_Tron_send_TronPort_addHead_listener(enqueue_Tron_send_TronPort_addHead);
register_Tron_send_TronPort_loose_listener(enqueue_Tron_send_TronPort_loose);
register_Tron_send_TronPort_tronReady_listener(enqueue_Tron_send_TronPort_tronReady);
register_Tron_send_TronPort_tronGo_listener(enqueue_Tron_send_TronPort_tronGo);
register_Tron_send_button_button_state_listener(enqueue_Tron_send_button_button_state);
register_Tron_send_lcd_print_num_listener(dispatch_Tron_send_lcd_print_num);
register_Tron_send_lcd_print_dec_listener(dispatch_Tron_send_lcd_print_dec);
register_Tron_send_lcd_print_str_listener(dispatch_Tron_send_lcd_print_str);
register_Tron_send_lcd_clear_listener(dispatch_Tron_send_lcd_clear);
register_Tron_send_lcd_set_cursor_listener(dispatch_Tron_send_lcd_set_cursor);
register_Tron_send_lcd_set_bgcolor_listener(dispatch_Tron_send_lcd_set_bgcolor);
register_Tron_send_lcd_fillRect_listener(dispatch_Tron_send_lcd_fillRect);
register_Tron_send_lcd_drawRect_listener(dispatch_Tron_send_lcd_drawRect);
register_Tron_send_lcd_drawLine_listener(dispatch_Tron_send_lcd_drawLine);
register_Tron_send_arduino_timer_start_listener(dispatch_Tron_send_arduino_timer_start);
register_Tron_send_arduino_timer_cancel_listener(dispatch_Tron_send_arduino_timer_cancel);
register_Tron_send_arduino_serial_print_str_listener(dispatch_Tron_send_arduino_serial_print_str);
register_Tron_send_arduino_serial_print_dec_listener(dispatch_Tron_send_arduino_serial_print_dec);
register_Tron_send_arduino_serial_print_num_listener(dispatch_Tron_send_arduino_serial_print_num);
register_Tron_send_arduino_usb_print_str_listener(dispatch_Tron_send_arduino_usb_print_str);
register_Tron_send_arduino_usb_print_dec_listener(dispatch_Tron_send_arduino_usb_print_dec);
register_Tron_send_arduino_usb_print_num_listener(dispatch_Tron_send_arduino_usb_print_num);
register_Tron_send_arduino_setDigitalHigh_listener(dispatch_Tron_send_arduino_setDigitalHigh);
register_Tron_send_arduino_setDigitalLow_listener(dispatch_Tron_send_arduino_setDigitalLow);
register_Tron_send_arduino_setOutput_listener(dispatch_Tron_send_arduino_setOutput);
register_Tron_send_arduino_setInput_listener(dispatch_Tron_send_arduino_setInput);
register_Tron_send_arduino_readDigital_listener(dispatch_Tron_send_arduino_readDigital);
register_Tron_send_arduino_readAnalog_listener(dispatch_Tron_send_arduino_readAnalog);
register_VirtualPort_send_TronPort_tronReady_listener(enqueue_VirtualPort_send_TronPort_tronReady);
register_VirtualPort_send_TronPort_tronGo_listener(enqueue_VirtualPort_send_TronPort_tronGo);
register_VirtualPort_send_TronPort_addHead_listener(enqueue_VirtualPort_send_TronPort_addHead);
register_VirtualPort_send_TronPort_loose_listener(enqueue_VirtualPort_send_TronPort_loose);

// Init the ID, state variables and properties for instance TronCfg_myLCD
TronCfg_myLCD_var.id = add_instance( (void*) &TronCfg_myLCD_var);
TronCfg_myLCD_var.Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_State = ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_EMPTY_STATE;
TronCfg_myLCD_var.Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_bpin__var = 3;

// Init the ID, state variables and properties for instance TronCfg_virtualSerial
TronCfg_virtualSerial_var.id = add_instance( (void*) &TronCfg_virtualSerial_var);
TronCfg_virtualSerial_var.VirtualPort_bChart_State = VIRTUALPORT_BCHART_INIT_STATE;

// Init the ID, state variables and properties for instance TronCfg_tron
TronCfg_tron_var.id = add_instance( (void*) &TronCfg_tron_var);
TronCfg_tron_var.Tron_TronStateChart_State = TRON_TRONSTATECHART_INIT_STATE;
TronCfg_tron_var.Tron_myID__var = 2;
TronCfg_tron_var.Tron_nbID__var = 3;
TronCfg_tron_var.Tron_nbReady__var = 0;
TronCfg_tron_var.Tron_headX__var = 30;
TronCfg_tron_var.Tron_headY__var = 40;
TronCfg_tron_var.Tron_tailX__var = 30;
TronCfg_tron_var.Tron_tailY__var = 40;
TronCfg_tron_var.Tron_headIndex__var = 0;
TronCfg_tron_var.Tron_headIndexQuarter__var = 0;
TronCfg_tron_var.Tron_lost__var = 0;
TronCfg_tron_var.Tron_won__var = 0;
TronCfg_tron_var.Tron_timer__var = 1;
TronCfg_tron_var.Tron_speed__var = 500;
TronCfg_tron_var.Tron_dirBuff__var = B00000001;

// Init the ID, state variables and properties for instance TronCfg_arduinoScheduler
TronCfg_arduinoScheduler_var.id = add_instance( (void*) &TronCfg_arduinoScheduler_var);
TronCfg_arduinoScheduler_var.ArduinoScheduler_ArduinoSchedulerStateChart_State = ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_ACTIVE_STATE;
TronCfg_arduinoScheduler_var.ArduinoScheduler_interrupt_counter__var = 0;

Adafruit_1_8pLCDShieldShield_RGBLCDShieldSM_OnEntry(ADAFRUIT_1_8PLCDSHIELDSHIELD_RGBLCDSHIELDSM_STATE, &TronCfg_myLCD_var);
Tron_TronStateChart_OnEntry(TRON_TRONSTATECHART_STATE, &TronCfg_tron_var);
ArduinoScheduler_ArduinoSchedulerStateChart_OnEntry(ARDUINOSCHEDULER_ARDUINOSCHEDULERSTATECHART_STATE, &TronCfg_arduinoScheduler_var);
VirtualPort_bChart_OnEntry(VIRTUALPORT_BCHART_STATE, &TronCfg_virtualSerial_var);
}

/*****************************************************************************
 * Main for configuration : TronCfg
 *****************************************************************************/

void setup() {
setupArduinoSerialForward(57600, 4);
initialize_configuration_TronCfg();
ArduinoScheduler_handle_polling_setup(&TronCfg_arduinoScheduler_var);

}

void loop() {
readSerial();
ArduinoScheduler_handle_polling_poll(&TronCfg_arduinoScheduler_var);
Adafruit_1_8pLCDShieldShield_handle_empty_event(&TronCfg_myLCD_var);

processMessageQueue();
}
